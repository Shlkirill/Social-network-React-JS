{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Tor\\\\Desktop\\\\Web\\\\4-React-JS\\\\my-social-net\\\\src\\\\components\\\\Users\\\\UsersContainer.jsx\";\nimport React from 'react';\nimport axios from 'axios';\nimport Users from './Users';\nimport { connect } from 'react-redux';\nimport { toogleFollowAC, setUsersAC, setPageAC, setCountUsersAC, toogleIfFetchingAC } from '../../redux/usersReducer';\n\nclass UsersContainer extends React.Component {\n  constructor(...args) {\n    super(...args);\n\n    this.getActivePage = page => {\n      this.props.setPage(page);\n      let serverRequest = axios.get(`https://social-network.samuraijs.com/api/1.0/users?count=${this.props.pageSize}&page=${page}`, {\n        withCredentials: true\n      });\n      this.props.toogleIsFetching(true);\n\n      let handler = response => {\n        this.props.setUsers(response.data.items, response.data.totalCount);\n        this.props.toogleIsFetching(false);\n      };\n\n      serverRequest.then(handler);\n    };\n\n    this.setCountUsers = value => {\n      this.props.setCountUsers(value);\n      this.props.toogleIsFetching(true);\n      let serverRequest = axios.get(`https://social-network.samuraijs.com/api/1.0/users?count=${value}&page=${this.props.activePage}`, {\n        withCredentials: true\n      });\n\n      let handler = response => {\n        this.props.setUsers(response.data.items, response.data.totalCount);\n        this.props.toogleIsFetching(false);\n      };\n\n      serverRequest.then(handler);\n    };\n  }\n\n  componentDidMount() {\n    let serverRequest = axios.get(`https://social-network.samuraijs.com/api/1.0/users?count=${this.props.pageSize}&page=${this.props.activePage}`, {\n      withCredentials: true\n    });\n    this.props.toogleIsFetching(true);\n\n    let handler = response => {\n      this.props.setUsers(response.data.items, response.data.totalCount);\n      this.props.toogleIsFetching(false);\n    };\n\n    serverRequest.then(handler);\n  }\n\n  render() {\n    return /*#__PURE__*/React.createElement(Users, {\n      getActivePage: this.getActivePage,\n      setCountUsers: this.setCountUsers,\n      users: this.props.users,\n      toogleFollow: this.props.toogleFollow,\n      totalUsersCount: this.props.totalUsersCount,\n      pageSize: this.props.pageSize,\n      isFetching: this.props.isFetching,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 47,\n        columnNumber: 13\n      }\n    });\n  }\n\n}\n\nlet mapStateToProps = state => {\n  return {\n    users: state.allUsers.users,\n    pageSize: state.allUsers.pageSize,\n    totalUsersCount: state.allUsers.totalUsersCount,\n    avtivePage: state.allUsers.activePage,\n    isFetching: state.allUsers.isFetching\n  };\n};\n\nlet mapDispatchToProps = {\n  toogleFollow: toogleFollowAC,\n  setUsers: setUsersAC,\n  setPage: setPageAC,\n  setCountUsers: setCountUsersAC,\n  toogleIsFetching: toogleIfFetchingAC\n};\nexport default connect(mapStateToProps, mapDispatchToProps)(UsersContainer);","map":{"version":3,"sources":["C:/Users/Tor/Desktop/Web/4-React-JS/my-social-net/src/components/Users/UsersContainer.jsx"],"names":["React","axios","Users","connect","toogleFollowAC","setUsersAC","setPageAC","setCountUsersAC","toogleIfFetchingAC","UsersContainer","Component","getActivePage","page","props","setPage","serverRequest","get","pageSize","withCredentials","toogleIsFetching","handler","response","setUsers","data","items","totalCount","then","setCountUsers","value","activePage","componentDidMount","render","users","toogleFollow","totalUsersCount","isFetching","mapStateToProps","state","allUsers","avtivePage","mapDispatchToProps"],"mappings":"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","sourcesContent":["import React from 'react';\r\nimport axios from 'axios';\r\nimport Users from './Users';\r\nimport { connect } from 'react-redux';\r\nimport { toogleFollowAC, setUsersAC, setPageAC, setCountUsersAC, toogleIfFetchingAC } from '../../redux/usersReducer';\r\n\r\nclass UsersContainer extends React.Component {\r\n\r\n    componentDidMount() {\r\n        let serverRequest = axios.get(`https://social-network.samuraijs.com/api/1.0/users?count=${this.props.pageSize}&page=${this.props.activePage}`, {\r\n            withCredentials: true,\r\n        });\r\n        this.props.toogleIsFetching(true);\r\n        let handler = (response) => {\r\n            this.props.setUsers(response.data.items, response.data.totalCount);\r\n            this.props.toogleIsFetching(false);\r\n        };\r\n        serverRequest.then(handler);\r\n    }\r\n    getActivePage = (page) => {\r\n        this.props.setPage(page);\r\n        let serverRequest = axios.get(`https://social-network.samuraijs.com/api/1.0/users?count=${this.props.pageSize}&page=${page}`, {\r\n            withCredentials: true,\r\n        });\r\n        this.props.toogleIsFetching(true);\r\n        let handler = (response) => {\r\n            this.props.setUsers(response.data.items, response.data.totalCount);\r\n            this.props.toogleIsFetching(false);\r\n        };\r\n        serverRequest.then(handler);\r\n    }\r\n    setCountUsers = (value) => {\r\n        this.props.setCountUsers(value);\r\n        this.props.toogleIsFetching(true);\r\n        let serverRequest = axios.get(`https://social-network.samuraijs.com/api/1.0/users?count=${value}&page=${this.props.activePage}`, {\r\n            withCredentials: true,\r\n        });\r\n\r\n        let handler = (response) => {\r\n            this.props.setUsers(response.data.items, response.data.totalCount);\r\n            this.props.toogleIsFetching(false);\r\n        };\r\n        serverRequest.then(handler);\r\n    }\r\n    render() {\r\n        return (\r\n            <Users getActivePage={this.getActivePage}\r\n                setCountUsers={this.setCountUsers}\r\n                users={this.props.users}\r\n                toogleFollow={this.props.toogleFollow}\r\n                totalUsersCount={this.props.totalUsersCount}\r\n                pageSize={this.props.pageSize}\r\n                isFetching={this.props.isFetching} />\r\n        )\r\n    }\r\n}\r\n\r\n\r\n\r\nlet mapStateToProps = (state) => {\r\n    return {\r\n        users: state.allUsers.users,\r\n        pageSize: state.allUsers.pageSize,\r\n        totalUsersCount: state.allUsers.totalUsersCount,\r\n        avtivePage: state.allUsers.activePage,\r\n        isFetching: state.allUsers.isFetching\r\n    }\r\n}\r\nlet mapDispatchToProps = {\r\n    toogleFollow: toogleFollowAC,\r\n    setUsers: setUsersAC,\r\n    setPage: setPageAC,\r\n    setCountUsers: setCountUsersAC,\r\n    toogleIsFetching: toogleIfFetchingAC,\r\n}\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(UsersContainer);"]},"metadata":{},"sourceType":"module"}