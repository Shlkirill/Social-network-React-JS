{"ast":null,"code":"export const followActionCreator = (id, followed) => {\n  return {\n    type: \"FOLLOW\",\n    userId: id,\n    followedText: followed\n  };\n};\nexport const unFollowActionCreator = id => {\n  return {\n    type: \"UNFOLLOW\",\n    userId: id\n  };\n};\nlet initialState = {\n  users: [{\n    id: 1,\n    followed: true,\n    fullName: 'Andrey',\n    status: 'I`m fine',\n    location: {\n      country: 'Russia',\n      city: 'Belgorod'\n    },\n    avatar: 'https://www.meme-arsenal.com/memes/005754c81977199be7a2fb68c8f48107.jpg'\n  }, {\n    id: 2,\n    followed: false,\n    fullName: 'Nika',\n    status: 'I`m fine',\n    location: {\n      country: 'Russia',\n      city: 'Belgorod'\n    },\n    avatar: 'https://www.meme-arsenal.com/memes/005754c81977199be7a2fb68c8f48107.jpg'\n  }, {\n    id: 3,\n    followed: true,\n    fullName: 'Kirill',\n    status: 'I`m fine',\n    location: {\n      country: 'Russia',\n      city: 'Belgorod'\n    },\n    avatar: 'https://www.meme-arsenal.com/memes/005754c81977199be7a2fb68c8f48107.jpg'\n  }]\n};\n\nconst UsersReducer = (state = initialState, action) => {\n  let stateCopy;\n\n  switch (action.type) {\n    case \"FOLLOW\":\n      stateCopy = { ...state,\n        users: [...state.users]\n      };\n\n      for (let k of stateCopy.users) {\n        if (k.id == action.userId) {\n          followedText == 'follow' ? k.followed = false : console.log(action.followedText);\n        }\n      }\n\n      return stateCopy;\n\n    case \"UNFOLLOW\":\n      stateCopy = { ...state,\n        users: [...state.users]\n      };\n\n      for (let k of stateCopy.users) {\n        if (k.id == action.userId) {\n          k.followed = true;\n        }\n      }\n\n      return stateCopy;\n\n    default:\n      return state;\n  }\n};\n\nexport default UsersReducer;","map":{"version":3,"sources":["D:/Desktop/Web/4-React-JS/my-social-net/src/redux/usersReducer.js"],"names":["followActionCreator","id","followed","type","userId","followedText","unFollowActionCreator","initialState","users","fullName","status","location","country","city","avatar","UsersReducer","state","action","stateCopy","k","console","log"],"mappings":"AAAA,OAAO,MAAMA,mBAAmB,GAAG,CAACC,EAAD,EAAIC,QAAJ,KAAiB;AAClD,SAAO;AACLC,IAAAA,IAAI,EAAE,QADD;AAELC,IAAAA,MAAM,EAAEH,EAFH;AAGLI,IAAAA,YAAY,EAAEH;AAHT,GAAP;AAKD,CANM;AAOP,OAAO,MAAMI,qBAAqB,GAAIL,EAAD,IAAQ;AAC3C,SAAO;AACLE,IAAAA,IAAI,EAAE,UADD;AAELC,IAAAA,MAAM,EAAEH;AAFH,GAAP;AAID,CALM;AAOP,IAAIM,YAAY,GAAG;AACjBC,EAAAA,KAAK,EAAE,CACL;AAAEP,IAAAA,EAAE,EAAE,CAAN;AAASC,IAAAA,QAAQ,EAAE,IAAnB;AAAyBO,IAAAA,QAAQ,EAAE,QAAnC;AAA6CC,IAAAA,MAAM,EAAE,UAArD;AAAiEC,IAAAA,QAAQ,EAAE;AAAEC,MAAAA,OAAO,EAAE,QAAX;AAAqBC,MAAAA,IAAI,EAAE;AAA3B,KAA3E;AAAoHC,IAAAA,MAAM,EAAE;AAA5H,GADK,EAEL;AAAEb,IAAAA,EAAE,EAAE,CAAN;AAASC,IAAAA,QAAQ,EAAE,KAAnB;AAA0BO,IAAAA,QAAQ,EAAE,MAApC;AAA4CC,IAAAA,MAAM,EAAE,UAApD;AAAgEC,IAAAA,QAAQ,EAAE;AAAEC,MAAAA,OAAO,EAAE,QAAX;AAAqBC,MAAAA,IAAI,EAAE;AAA3B,KAA1E;AAAmHC,IAAAA,MAAM,EAAE;AAA3H,GAFK,EAGL;AAAEb,IAAAA,EAAE,EAAE,CAAN;AAASC,IAAAA,QAAQ,EAAE,IAAnB;AAAyBO,IAAAA,QAAQ,EAAE,QAAnC;AAA6CC,IAAAA,MAAM,EAAE,UAArD;AAAiEC,IAAAA,QAAQ,EAAE;AAAEC,MAAAA,OAAO,EAAE,QAAX;AAAqBC,MAAAA,IAAI,EAAE;AAA3B,KAA3E;AAAoHC,IAAAA,MAAM,EAAE;AAA5H,GAHK;AADU,CAAnB;;AAQA,MAAMC,YAAY,GAAG,CAACC,KAAK,GAAGT,YAAT,EAAuBU,MAAvB,KAAkC;AACrD,MAAIC,SAAJ;;AAEA,UAAQD,MAAM,CAACd,IAAf;AACE,SAAK,QAAL;AACEe,MAAAA,SAAS,GAAG,EACV,GAAGF,KADO;AAEVR,QAAAA,KAAK,EAAE,CAAC,GAAGQ,KAAK,CAACR,KAAV;AAFG,OAAZ;;AAIA,WAAK,IAAIW,CAAT,IAAcD,SAAS,CAACV,KAAxB,EAA+B;AAC7B,YAAIW,CAAC,CAAClB,EAAF,IAAQgB,MAAM,CAACb,MAAnB,EAA2B;AACxBC,UAAAA,YAAY,IAAI,QAAjB,GAA6Bc,CAAC,CAACjB,QAAF,GAAa,KAA1C,GAAiDkB,OAAO,CAACC,GAAR,CAAYJ,MAAM,CAACZ,YAAnB,CAAjD;AACD;AACF;;AACD,aAAOa,SAAP;;AAEF,SAAK,UAAL;AACEA,MAAAA,SAAS,GAAG,EACV,GAAGF,KADO;AAEVR,QAAAA,KAAK,EAAE,CAAC,GAAGQ,KAAK,CAACR,KAAV;AAFG,OAAZ;;AAIA,WAAK,IAAIW,CAAT,IAAcD,SAAS,CAACV,KAAxB,EAA+B;AAC7B,YAAIW,CAAC,CAAClB,EAAF,IAAQgB,MAAM,CAACb,MAAnB,EAA4B;AAC1Be,UAAAA,CAAC,CAACjB,QAAF,GAAa,IAAb;AACD;AACF;;AACD,aAAOgB,SAAP;;AAEF;AACE,aAAOF,KAAP;AA1BJ;AA4BD,CA/BD;;AAiCA,eAAeD,YAAf","sourcesContent":["export const followActionCreator = (id,followed) => {\r\n  return {\r\n    type: \"FOLLOW\",\r\n    userId: id,\r\n    followedText: followed,\r\n  }\r\n}\r\nexport const unFollowActionCreator = (id) => {\r\n  return {\r\n    type: \"UNFOLLOW\",\r\n    userId: id,\r\n  }\r\n}\r\n\r\nlet initialState = {\r\n  users: [\r\n    { id: 1, followed: true, fullName: 'Andrey', status: 'I`m fine', location: { country: 'Russia', city: 'Belgorod' }, avatar: 'https://www.meme-arsenal.com/memes/005754c81977199be7a2fb68c8f48107.jpg' },\r\n    { id: 2, followed: false, fullName: 'Nika', status: 'I`m fine', location: { country: 'Russia', city: 'Belgorod' }, avatar: 'https://www.meme-arsenal.com/memes/005754c81977199be7a2fb68c8f48107.jpg' },\r\n    { id: 3, followed: true, fullName: 'Kirill', status: 'I`m fine', location: { country: 'Russia', city: 'Belgorod' }, avatar: 'https://www.meme-arsenal.com/memes/005754c81977199be7a2fb68c8f48107.jpg' },\r\n  ],\r\n};\r\n\r\nconst UsersReducer = (state = initialState, action) => {\r\n  let stateCopy;\r\n\r\n  switch (action.type) {\r\n    case \"FOLLOW\":\r\n      stateCopy = {\r\n        ...state,\r\n        users: [...state.users]\r\n      };\r\n      for (let k of stateCopy.users) {\r\n        if (k.id == action.userId) {\r\n          (followedText == 'follow') ? k.followed = false: console.log(action.followedText);\r\n        }\r\n      }\r\n      return stateCopy;\r\n\r\n    case \"UNFOLLOW\":\r\n      stateCopy = {\r\n        ...state,\r\n        users: [...state.users]\r\n      };\r\n      for (let k of stateCopy.users) {\r\n        if (k.id == action.userId ) {\r\n          k.followed = true;\r\n        }\r\n      }\r\n      return stateCopy;\r\n\r\n    default:\r\n      return state;\r\n  }\r\n}\r\n\r\nexport default UsersReducer;"]},"metadata":{},"sourceType":"module"}